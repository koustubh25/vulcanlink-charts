# Default values for base.
replicaCount: 1

kind: StatefulSet #Deployment

image:
  repository: alpine
  pullPolicy: IfNotPresent
  tag: "3.14"
  #command: ["tail", "-f", "/dev/null"]
  #args: []

initContainers: []

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

configmap:
  - name: '{{ include "base.fullname" . }}-env'
    data: {}
    envFrom: false
    env:
      keys: []
  - name: '{{ include "base.fullname" . }}-files'
    data: {}
    env:
      keys: []
    envFrom: false

secret:
  - name: '{{ include "base.fullname" . }}-secret'
    data: {}
    env:
      keys: []
    envFrom: false

envFromFieldRef:
  - name: POD_NAME
    fieldPath: metadata.name
  - name: POD_NAMESPACE
    fieldPath: metadata.namespace
  - name: POD_IP
    fieldPath: status.podIP
  - name: NODE_NAME
    fieldPath: spec.nodeName
  - name: HOST_IP
    fieldPath: status.hostIP

container:
  ports:
    - name: http
      containerPort: 80
  volumes:
    - name: files
      mountPath: /mnt/files
      configMap:
        enabled: false
        name: '{{ include "base.fullname" . }}-files'
    - name: secret
      mountPath: /mnt/secret
      secret:
        enabled: false
        name: '{{ include "base.fullname" . }}-secret'
    - name: data
      mountPath: /mnt/data
      persistence:
        enabled: false
        annotations: {}
        accessModes:
          - ReadWriteOnce
        size: 1Gi

persistence:
  storageClass: ""

service:
  - name: http
    port: 80
  #prometheus:
  #  type: ClusterIP
  #  port: 3000

prometheus: false

serviceAccount:
  create: true
  annotations: {}
  # If not set and create is true, a name is generated using the fullname template
  name: ""

annotations: {}
securityContext: {}
resources: {}
nodeSelector: {}
tolerations: []
affinity: {}
